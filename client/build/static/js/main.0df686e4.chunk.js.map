{"version":3,"sources":["utils/helpers.js","utils/actions.js","utils/reducers.js","utils/GlobalState.js","components/ProductItem/index.js","utils/queries.js","components/CategoryMenu/index.js","assets/spinner.gif","components/ProductList/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","components/CommentList/index.js","utils/mutations.js","components/CommentForm/index.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","pages/OrderHistory.js","pages/Upload.js","App.js","serviceWorker.js","index.js"],"names":["idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","UPDATE_PRODUCTS","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","TOGGLE_CART","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","reducer","state","action","type","products","cartOpen","cart","product","map","purchaseQuantity","newState","filter","length","categories","currentCategory","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","ProductItem","item","name","price","quantity","className","to","alt","src","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CHECKOUT","QUERY_CATEGORIES","QUERY_USER","CategoryMenu","useQuery","loading","categoryData","data","useEffect","forEach","category","then","class","id","ProductList","spinner","CartItem","images","placeholder","onChange","target","role","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","res","redirectToCheckout","sessionId","checkout","session","a","getCart","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","CommentList","comments","comment","commentAuthor","commentText","createdAt","LOGIN","ADD_ORDER","ADD_USER","ADD_COMMENT","CommentForm","productId","useState","setCommentText","useMutation","addComment","handleFormSubmit","error","event","preventDefault","getProfile","email","onSubmit","style","lineHeight","resize","Detail","useParams","currentProduct","setCurrentProduct","user","indexedProducts","firstName","description","disabled","p","Jumbotron","children","height","clear","paddingTop","textAlign","NoMatch","Login","password","formState","setFormState","login","mutationResponse","handleChange","htmlFor","Signup","addUser","lastName","Nav","href","logout","Success","addOrder","setTimeout","saveOrder","OrderHistory","orders","order","purchaseDate","toLocaleDateString","index","Upload","setImages","imageURLs","setImageURLs","newImageUrls","image","URL","createObjectURL","multiple","accept","files","imageSrc","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sRAOO,SAASA,EAAWC,EAAWC,EAAQC,GAC5C,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IACIC,EAAIC,EAAIC,EADNC,EAAUC,OAAOC,UAAUC,KAAK,YAAa,GAEnDH,EAAQI,gBAAkB,SAASC,GACjC,IAAMR,EAAKG,EAAQM,OACnBT,EAAGU,kBAAkB,WAAY,CAAEC,QAAS,QAC5CX,EAAGU,kBAAkB,aAAc,CAAEC,QAAS,QAC9CX,EAAGU,kBAAkB,OAAQ,CAAEC,QAAS,SAG1CR,EAAQS,QAAU,SAASJ,GACzBK,QAAQC,IAAI,uBAGdX,EAAQY,UAAY,SAASP,GAS3B,OARAR,EAAKG,EAAQM,OACbR,EAAKD,EAAGgB,YAAYtB,EAAW,aAC/BQ,EAAQD,EAAGgB,YAAYvB,GAEvBM,EAAGY,QAAU,SAASJ,GACpBK,QAAQC,IAAI,QAASN,IAGfb,GACN,IAAK,MACHO,EAAMgB,IAAItB,GACVE,EAAQF,GACR,MACF,IAAK,MACH,IAAMuB,EAAMjB,EAAMkB,SAClBD,EAAIJ,UAAY,WACdjB,EAAQqB,EAAIV,SAEd,MACF,IAAK,SACHP,EAAMmB,OAAOzB,EAAO0B,KACpB,MACF,QACET,QAAQC,IAAI,mBAIhBb,EAAGsB,WAAa,WACdvB,EAAGwB,a,oBCnDEC,EAAkB,kBAElBC,EAAc,cACdC,EAAuB,uBACvBC,EAAmB,mBAEnBC,EAAuB,uBACvBC,EAAc,cAEdC,EAAoB,oBACpBC,EAA0B,0BCI1BC,EAAU,SAACC,EAAOC,GAC7B,OAAQA,EAAOC,MAEb,KAAKX,EACH,OAAO,2BACFS,GADL,IAEEG,SAAS,YAAKF,EAAOE,YAGzB,KAAKX,EACH,OAAO,2BACFQ,GADL,IAEEI,UAAU,EACVC,KAAK,GAAD,mBAAML,EAAMK,MAAZ,CAAkBJ,EAAOK,YAEjC,KAAKb,EACH,OAAO,2BACFO,GADL,IAEEK,KAAK,GAAD,mBAAML,EAAMK,MAAZ,YAAqBJ,EAAOE,aAIpC,KAAKR,EACH,OAAO,2BACFK,GADL,IAEEI,UAAU,EACVC,KAAML,EAAMK,KAAKE,KAAI,SAACD,GAIpB,OAHIL,EAAOb,MAAQkB,EAAQlB,MACzBkB,EAAQE,iBAAmBP,EAAOO,kBAE7BF,OAMb,KAAKZ,EACH,IAAIe,EAAWT,EAAMK,KAAKK,QAAO,SAACJ,GAChC,OAAOA,EAAQlB,MAAQa,EAAOb,OAKhC,OAAO,2BACFY,GADL,IAEEI,SAAUK,EAASE,OAAS,EAC5BN,KAAMI,IAGV,ID1DsB,aC2DpB,OAAO,2BACFT,GADL,IAEEI,UAAU,EACVC,KAAM,KAGV,KAAKT,EACH,OAAO,2BACFI,GADL,IAEEI,UAAWJ,EAAMI,WAGrB,KAAKP,EACH,OAAO,2BACFG,GADL,IAEEY,WAAW,YAAKX,EAAOW,cAG3B,KAAKd,EACH,OAAO,2BACFE,GADL,IAEEa,gBAAiBZ,EAAOY,kBAK5B,QACE,OAAOb,I,uBCxFPc,EAAeC,0BACbC,EAAaF,EAAbE,SAEFC,EAAgB,SAAC,GAA6B,EAA3BC,MAA4B,IDyFnBC,ECzFMC,EAAY,iBAClD,GDwFgCD,ECxFY,CAC1ChB,SAAU,GACVE,KAAM,GACND,UAAU,EACVQ,WAAY,GACZC,gBAAiB,IDoFZQ,qBAAWtB,EAASoB,ICzF3B,mBAAOnB,EAAP,KAAcsB,EAAd,KAQA,OAAO,cAACN,EAAD,aAAUE,MAAO,CAAClB,EAAOsB,IAAeF,KAG3CG,EAAkB,WACtB,OAAOC,qBAAWV,IC0CLW,I,UAAAA,EAtDf,SAAqBC,GACnB/C,QAAQC,IAAI8C,GACZ,MAA0BH,IAA1B,mBAAOvB,EAAP,KAAcsB,EAAd,KAGEK,EAICD,EAJDC,KACAvC,EAGCsC,EAHDtC,IACAwC,EAECF,EAFDE,MAIMvB,GAFLqB,EADDG,SAGe7B,EAATK,MAwBR,OACE,sBAAKyB,UAAU,iBAAf,UACE,eAAC,IAAD,CAAMC,GAAE,oBAAe3C,GAAvB,UAEA,qBACI4C,IAAKL,EACLM,IAAG,kBAAa,eAElB,4BAAIN,OAEN,8BAEE,qCAAQC,OAEV,wBAAQE,UAAU,aAAaI,QAnCjB,WAChB,IAAMC,EAAa9B,EAAK+B,MAAK,SAACC,GAAD,OAAcA,EAASjD,MAAQA,KACxD+C,GACFb,EAAS,CACPpB,KAAMP,EACNP,IAAKA,EACLoB,iBAAkB8B,SAASH,EAAW3B,kBAAoB,IAE5DjD,EAAW,OAAQ,MAAT,YAAC,eACN4E,GADK,IAER3B,iBAAkB8B,SAASH,EAAW3B,kBAAoB,OAG5Dc,EAAS,CACPpB,KAAMV,EACNc,QAAQ,2BAAMoB,GAAP,IAAalB,iBAAkB,MAExCjD,EAAW,OAAQ,MAAT,YAAC,eAAoBmE,GAArB,IAA2BlB,iBAAkB,OAkBvD,6B,yBCtDO+B,EAAiBC,YAAH,8VAqBdC,EAAiBD,YAAH,qIA6BdE,GArBqBF,YAAH,oRAqBCA,YAAH,uFAShBG,EAAaH,YAAH,iSCIRI,MAvDf,WACE,MAA0BrB,IAA1B,mBAAOvB,EAAP,KAAcsB,EAAd,KAEQV,EAAeZ,EAAfY,WAER,EAAwCiC,YAASH,GAAzCI,EAAR,EAAQA,QAAeC,EAAvB,EAAiBC,KA4BjB,OA1BAC,qBAAU,WACJF,GACFzB,EAAS,CACPpB,KAAML,EACNe,WAAYmC,EAAanC,aAE3BmC,EAAanC,WAAWsC,SAAQ,SAACC,GAC/B5F,EAAW,aAAc,MAAO4F,OAExBL,GACVvF,EAAW,aAAc,OAAO6F,MAAK,SAACxC,GACpCU,EAAS,CACPpB,KAAML,EACNe,WAAYA,SAIjB,CAACmC,EAAcD,EAASxB,IAUzB,sBAAK+B,MAAM,cAAX,UACE,oDACF,uBACGzC,EAAWL,KAAI,SAACmB,GAAD,OACd,wBAEEQ,QAAS,WAdG,IAACoB,IAeC5B,EAAKtC,IAdzBkC,EAAS,CACPpB,KAAMJ,EACNe,gBAAiByC,KASf,SAMG5B,EAAKC,MALDD,EAAKtC,QAShB,8BACE,6BC3DS,MAA0B,oCC6E1BmE,I,UAAAA,GAnEf,WACE,MAA0BhC,IAA1B,mBAAOvB,EAAP,KAAcsB,EAAd,KAEQT,EAAoBb,EAApBa,gBAER,EAA0BgC,YAASN,GAA3BO,EAAR,EAAQA,QAASE,EAAjB,EAAiBA,KA+BjB,OA7BAC,qBAAU,WACJD,GACF1B,EAAS,CACPpB,KAAMX,EACNY,SAAU6C,EAAK7C,WAEjB6C,EAAK7C,SAAS+C,SAAQ,SAAC5C,GACrB/C,EAAW,WAAY,MAAO+C,OAEtBwC,GACVvF,EAAW,WAAY,OAAO6F,MAAK,SAACjD,GAClCmB,EAAS,CACPpB,KAAMX,EACNY,SAAUA,SAIf,CAAC6C,EAAMF,EAASxB,IAajB,sBAAKQ,UAAU,OAAf,UACE,sBAAKwB,GAAG,gBAAR,UACA,+CACA,+FACA,sCAAQ,qCAAR,oEACA,mEAEA,uBACA,cAAC,EAAD,IACA,uBACCtD,EAAMG,SAASQ,OACd,qBAAKmB,UAAU,aAAf,UArBCjB,EAIEb,EAAMG,SAASO,QACpB,SAACJ,GAAD,OAAaA,EAAQ6C,SAAS/D,MAAQyB,KAJ/Bb,EAAMG,UAqBSI,KAAI,SAACD,GAAD,OACpB,cAAC,EAAD,CAEAlB,IAAKkB,EAAQlB,IACbuC,KAAMrB,EAAQqB,KACdC,MAAOtB,EAAQsB,MACfC,SAAUvB,EAAQuB,UAJbvB,EAAQlB,UASjB,qEAED0D,EAAU,qBAAKb,IAAKuB,EAASxB,IAAI,YAAe,S,+CCHxCyB,GAhEE,SAAC,GAAc,IAAZ/B,EAAW,EAAXA,KAElB,EAAqBH,IAAZD,EAAT,oBA+BA,OACE,sBAAKQ,UAAU,WAAf,UACE,8BACE,qBACEG,IAAG,kBAAaP,EAAKgC,OAAO,IAC5B1B,IAAI,OAGR,gCACE,gCAAMN,EAAKC,KAAX,MAAoBD,EAAKE,SACzB,gCACE,wCACA,uBACE1B,KAAK,SACLyD,YAAY,IACZzC,MAAOQ,EAAKlB,iBACZoD,SApCO,SAACtF,GAChB,IAAM4C,EAAQ5C,EAAEuF,OAAO3C,MACT,MAAVA,GACFI,EAAS,CACPpB,KAAMR,EACNN,IAAKsC,EAAKtC,MAEZ7B,EAAW,OAAQ,SAAT,eAAwBmE,MAGlCJ,EAAS,CACPpB,KAAMP,EACNP,IAAKsC,EAAKtC,IACVoB,iBAAkB8B,SAASpB,KAE7B3D,EAAW,OAAQ,MAAT,YAAC,eAAoBmE,GAArB,IAA2BlB,iBAAkB8B,SAASpB,UAuB5D,sBACE4C,KAAK,MACL,aAAW,QACX5B,QAAS,kBAlDI,SAAAR,GACrBJ,EAAS,CACPpB,KAAMR,EACNN,IAAKsC,EAAKtC,MAEZ7B,EAAW,OAAQ,SAAT,eAAwBmE,IA6CXqC,CAAerC,IAHhC,0C,sCCZK,O,4FAzCb,WACE,OAAOsC,KAAOC,KAAKC,c,sBAGrB,WAEE,IAAMC,EAAQF,KAAKC,WACnB,QAASC,IAAUF,KAAKG,eAAeD,K,4BAGzC,SAAeA,GACb,IAEE,OADgBH,KAAOG,GACXE,IAAMC,KAAKC,MAAQ,IAG/B,MAAOC,GACP,OAAO,K,sBAIX,WAEE,OAAOC,aAAaC,QAAQ,c,mBAG9B,SAAMC,GAEJF,aAAaG,QAAQ,WAAYD,GAEjCzG,OAAO2G,SAASC,OAAO,O,oBAGzB,WAEEL,aAAaM,WAAW,YAExB7G,OAAO2G,SAASC,OAAO,S,MC7BrBE,I,MAAgBC,aAAW,qCA6FlBC,GA3FF,WACX,MAA0B3D,IAA1B,mBAAOvB,EAAP,KAAcsB,EAAd,KACA,EAAgC6D,aAAa1C,GAA7C,mBAAO2C,EAAP,KAAsBpC,EAAtB,KAAsBA,KAqBtB,SAASqC,IACP/D,EAAS,CAAEpB,KAAMN,IAyBnB,OA7CAqD,qBAAU,WACJD,GACFgC,GAAc5B,MAAK,SAACkC,GAClBA,EAAIC,mBAAmB,CAAEC,UAAWxC,EAAKyC,SAASC,eAGrD,CAAC1C,IAEJC,qBAAU,WAAM,8CACd,6BAAA0C,EAAA,sEACqBpI,EAAW,OAAQ,OADxC,OACQ8C,EADR,OAEEiB,EAAS,CAAEpB,KAAMT,EAAsBU,SAAS,YAAKE,KAFvD,4CADc,sBAMTL,EAAMK,KAAKM,QAND,WAAD,wBAOZiF,KAED,CAAC5F,EAAMK,KAAKM,OAAQW,IA4BlBtB,EAAMI,SAST,sBAAK0B,UAAU,OAAf,UACE,qBAAKA,UAAU,QAAQI,QAASmD,EAAhC,qBAGA,+CACCrF,EAAMK,KAAKM,OACV,gCACGX,EAAMK,KAAKE,KAAI,SAACmB,GAAD,OACd,cAAC,GAAD,CAAyBA,KAAMA,GAAhBA,EAAKtC,QAGtB,sBAAK0C,UAAU,yBAAf,UACE,8CA3CV,WACE,IAAI+D,EAAM,EAIV,OAHA7F,EAAMK,KAAK6C,SAAQ,SAACxB,GAClBmE,GAAOnE,EAAKE,MAAQF,EAAKlB,oBAEpBqF,EAAIC,QAAQ,GAsCMC,MAEhBC,GAAKC,WACJ,wBAAQ/D,QAtCpB,WACE,IAAMgE,EAAa,GAEnBlG,EAAMK,KAAK6C,SAAQ,SAACxB,GAClB,IAAK,IAAIyE,EAAI,EAAGA,EAAIzE,EAAKlB,iBAAkB2F,IACzCD,EAAWE,KAAK1E,EAAKtC,QAIzBgG,EAAY,CACViB,UAAW,CAAElG,SAAU+F,MA4Bf,sBAEA,+DAKN,+BACE,sBAAMpC,KAAK,MAAM,aAAW,UAA5B,0BADF,qDA7BF,qBAAKhC,UAAU,cAAcI,QAASmD,EAAtC,2BCnDSiB,GATF,WACX,OACE,sBAAKxE,UAAU,YAAf,UACE,cAAC,GAAD,IACA,cAAC,GAAD,QCgCSyE,GAtCK,SAAC,GAAuB,IAAD,IAApBC,gBAAoB,MAAT,GAAS,EACvC,OAAKA,EAAS7F,OAKV,mCAEI,8BACK6F,GACGA,EAASjG,KAAI,SAACkG,GAAD,OAET,8BAEI,qBAAK3E,UAAU,YAAf,SACI,qBAAKA,UAAU,UAAf,SACI,sBAAKA,UAAU,uCAAf,UACI,sBAAKA,UAAU,gBAAf,wBACgB2E,EAAQC,cADxB,KACyC,OAEzC,qBAAK5E,UAAU,mCAAf,SACI,qBAAKA,UAAU,eAAf,SACK2E,EAAQE,gBAGjB,qBAAK7E,UAAU,iBAAf,SACK2E,EAAQG,oBAdnBH,EAAQrH,YAV3B,2D,SCFFyH,GAAQrE,YAAH,mMAWLsE,GAAYtE,YAAH,qSAkBTuE,GAAWvE,YAAH,kVAqBRwE,GAAcxE,YAAH,oXCkCTyE,IDdYzE,YAAH,gTChEJ,SAAC,GAAmB,IAAjB0E,EAAgB,EAAhBA,UACnB,EAAsCC,mBAAS,IAA/C,mBAAOR,EAAP,KAAoBS,EAApB,KAEA,EAAgCC,aAAYL,IAA5C,mBAAOM,EAAP,KAEMC,GAFN,KAAqBC,MAEC,yCAAG,WAAOC,GAAP,gBAAA9B,EAAA,6DACrB8B,EAAMC,iBADe,kBAIMJ,EAAW,CAC9BjB,UAAW,CACPa,YACAP,cACAD,cAAeV,GAAK2B,aAAa3E,KAAK4E,SAR7B,kBAIT5E,KAQRoE,EAAe,IAZE,gDAcjBzI,QAAQ6I,MAAR,MAdiB,yDAAH,uDA0BtB,OACI,8BAEKxB,GAAKC,WACF,mCACI,qBAAKnE,UAAU,YAAf,SACI,qBAAKA,UAAU,UAAf,SACI,sBAAKA,UAAU,uCAAf,UACI,yEAGA,uBACIA,UAAU,gEACV+F,SAAUN,EAFd,UAII,0BACI5F,KAAK,cACLG,UAAU,sBACV6B,YAAY,aACZzC,MAAOyF,EACPmB,MAAO,CAAEC,WAAY,MAAOC,OAAQ,YACpCpE,SA7Bf,SAAC6D,GAClB,MAAwBA,EAAM5D,OAAtBlC,EAAR,EAAQA,KAAMT,EAAd,EAAcA,MAED,gBAATS,GACAyF,EAAelG,MA2BS,wBAAQY,UAAU,aAAa5B,KAAK,SAApC,uCASpB,qBAAK4B,UAAU,mBAAf,SACI,8BACI,8BACI,kFACsD,IAClD,cAAC,IAAD,CAAMC,GAAG,SAAT,mBAFJ,OAEsC,cAAC,IAAD,CAAMA,GAAG,UAAT,kCC+FnDkG,OAtJf,WACE,MAA0B1G,IAA1B,mBAAOvB,EAAP,KAAcsB,EAAd,KACQgC,EAAO4E,cAAP5E,GAER,EAA4C6D,mBAAS,IAArD,mBAAOgB,EAAP,KAAuBC,EAAvB,KAEA,EAA0BvF,YAASN,GAA3BO,EAAR,EAAQA,QAASE,EAAjB,EAAiBA,KAETqF,EAASxF,YAASF,GAAlB0F,KAGAlI,EAAmBH,EAAnBG,SAAUE,EAASL,EAATK,KAgElB,OA7DA4C,qBAAU,WAEJ9C,EAASQ,OACXyH,EAAkBjI,EAASiC,MAAK,SAAC9B,GAAD,OAAaA,EAAQlB,MAAQkE,MAGtDN,GACP1B,EAAS,CACPpB,KAAMX,EACNY,SAAU6C,EAAK7C,WAGjB6C,EAAK7C,SAAS+C,SAAQ,SAAC5C,GACrB/C,EAAW,WAAY,MAAO+C,OAIxBwC,GACRvF,EAAW,WAAY,OAAO6F,MAAK,SAACkF,GAClChH,EAAS,CACPpB,KAAMX,EACNY,SAAUmI,SAIf,CAACnI,EAAU6C,EAAMF,EAASxB,EAAUgC,IAqCrC,mCACE,sBAAKxB,UAAU,kBAAf,UACGqG,GAAkB9H,EACjB,gCACA,qBAAKyB,UAAU,OAAf,SACE,cAAC,IAAD,CAAMC,GAAG,IAAT,+BAEA,uBAEI,sBAAKD,UAAU,iBAAf,UACI,4BACGqG,EAAexG,OAEhB,mCACKwG,EAAevG,MAAO,UAIjD,sBAAKE,UAAU,mBAAf,UACkB,qBAAKA,UAAU,YAAf,SACE,wBAAQA,UAAU,cAAlB,SACE,qBACEE,IAAKmG,EAAexG,KACpBM,IAAG,kBAAakG,EAAezE,OAAO,UAK3C2E,EACD,sBAAKvG,UAAU,cAAf,UACE,4BAAIuG,EAAKE,YACP,4BAAIJ,EAAeK,iBAGrB,qBAAK1G,UAAU,cAAf,SACE,4BAAIqG,EAAeK,mBAKvB,gCACA,wBAAQ1G,UAAU,aAAaI,QA5E7B,WAChB,IAAMC,EAAa9B,EAAK+B,MAAK,SAACC,GAAD,OAAcA,EAASjD,MAAQkE,KACxDnB,GACFb,EAAS,CACPpB,KAAMP,EACNP,IAAKkE,EACL9C,iBAAkB8B,SAASH,EAAW3B,kBAAoB,IAE5DjD,EAAW,OAAQ,MAAT,YAAC,eACN4E,GADK,IAER3B,iBAAkB8B,SAASH,EAAW3B,kBAAoB,OAG5Dc,EAAS,CACPpB,KAAMV,EACNc,QAAQ,2BAAM6H,GAAP,IAAuB3H,iBAAkB,MAElDjD,EAAW,OAAQ,MAAT,YAAC,eAAoB4K,GAArB,IAAqC3H,iBAAkB,OA2DrD,yBAGA,wBAAQsB,UAAU,aAChB2G,UAAWpI,EAAK+B,MAAK,SAACsG,GAAD,OAAOA,EAAEtJ,MAAQ+I,EAAe/I,OACrD8C,QA5DK,WACrBZ,EAAS,CACPpB,KAAMR,EACNN,IAAK+I,EAAe/I,MAGtB7B,EAAW,OAAQ,SAAT,eAAwB4K,KAoDpB,iCAQN,8BACA,cAAC,GAAD,CAAajB,UAAWiB,EAAe/I,QAGrC,4CAIF,8BACA,cAAC,GAAD,CAAaoH,SAAU2B,EAAe3B,gBAKpC,KACP1D,EAAU,qBAAKb,IAAKuB,EAASxB,IAAI,YAAe,KACjD,cAAC,GAAD,UCzJS2G,OAVf,YAAkC,IAAbC,EAAY,EAAZA,SACnB,OACE,qBACEd,MAAO,CAAEe,OAAQ,IAAKC,MAAO,OAAQC,WAAY,IAAKC,UAAW,UADnE,SAGGJ,KCWQK,GAfC,WACd,OACE,8BACE,eAAC,GAAD,WACE,oDACA,6BACE,sBAAMnF,KAAK,MAAM,aAAW,+BAA5B,kC,SCmFKoF,OAtFf,SAAe9H,GACb,MAAkC+F,mBAAS,CAAES,MAAO,GAAIuB,SAAU,KAAlE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA2BhC,aAAYR,IAAvC,mBAAOyC,EAAP,KAAgB9B,EAAhB,KAAgBA,MAEVD,EAAgB,yCAAG,WAAOE,GAAP,kBAAA9B,EAAA,6DACvB8B,EAAMC,iBADiB,kBAGU4B,EAAM,CACnCjD,UAAW,CAAEuB,MAAOwB,EAAUxB,MAAOuB,SAAUC,EAAUD,YAJtC,OAGfI,EAHe,OAMfpF,EAAQoF,EAAiBvG,KAAKsG,MAAMnF,MAC1C6B,GAAKsD,MAAMnF,GAPU,gDASrBxF,QAAQC,IAAR,MATqB,yDAAH,sDAahB4K,EAAe,SAAC/B,GACpB,MAAwBA,EAAM5D,OAAtBlC,EAAR,EAAQA,KAAMT,EAAd,EAAcA,MACdmI,EAAa,2BACRD,GADO,mBAETzH,EAAOT,MAIZ,OACE,sBAAKY,UAAU,kBAAf,UACE,qBAAKA,UAAU,aAAf,SACA,cAAC,IAAD,CAAMC,GAAG,UAAT,mCAEA,uBACA,8BACA,yCAEA,uBACA,uBAAMD,UAAU,aAAa+F,SAAUN,EAAvC,UACE,uBACF,yBAAQ,cAAY,OAApB,UACF,qBAAKlE,MAAM,gBACX,qBAAKA,MAAM,cACX,sBAAKA,MAAM,YAAX,UACE,qBAAKA,MAAM,SACX,qBAAKA,MAAM,aAEb,qBAAKA,MAAM,SACX,qBAAKA,MAAM,SACX,qBAAKA,MAAM,YACX,qBAAKA,MAAM,eAEP,gCACE,uBAAOoG,QAAQ,QAAf,mCACA,uBACE9F,YAAY,qBACZhC,KAAK,QACLzB,KAAK,QACLoD,GAAG,QACHM,SAAU4F,OAGd,gCACE,uBAAOC,QAAQ,MAAf,8BACA,uBACE9F,YAAY,SACZhC,KAAK,WACLzB,KAAK,WACLoD,GAAG,MACHM,SAAU4F,OAGbhC,EACC,8BACE,mBAAG1F,UAAU,aAAb,sDAEA,KACH,uBACD,8BACE,wBAAQA,UAAU,eAAe5B,KAAK,SAAtC,sBAEF,0BAEF,uBAAS,uBACT,uBAAS,2BCqBAwJ,OAtGf,SAAgBtI,GACd,MAAkC+F,mBAAS,CAAES,MAAO,GAAIuB,SAAU,KAAlE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkBhC,aAAYN,IAAvB4C,EAAP,oBAEMpC,EAAgB,yCAAG,WAAOE,GAAP,kBAAA9B,EAAA,6DACvB8B,EAAMC,iBADiB,SAEQiC,EAAQ,CACrCtD,UAAW,CACTuB,MAAOwB,EAAUxB,MACjBuB,SAAUC,EAAUD,SACpBZ,UAAWa,EAAUb,UACrBqB,SAAUR,EAAUQ,YAPD,OAEjBL,EAFiB,OAUjBpF,EAAQoF,EAAiBvG,KAAK2G,QAAQxF,MAC5C6B,GAAKsD,MAAMnF,GAXY,2CAAH,sDAchBqF,EAAe,SAAC/B,GACpB,MAAwBA,EAAM5D,OAAtBlC,EAAR,EAAQA,KAAMT,EAAd,EAAcA,MACdmI,EAAa,2BACRD,GADO,mBAETzH,EAAOT,MAIZ,OACE,sBAAKY,UAAU,kBAAf,UACE,qBAAKA,UAAU,aAAf,SACA,cAAC,IAAD,CAAMC,GAAG,SAAT,kCAEA,uBACA,8BACA,2CAEA,uBACA,uBAAMD,UAAU,aAAa+F,SAAUN,EAAvC,UACE,uBACA,yBAAQ,cAAY,OAApB,UACJ,qBAAKlE,MAAM,gBACX,qBAAKA,MAAM,cACX,sBAAKA,MAAM,YAAX,UACE,qBAAKA,MAAM,SACX,qBAAKA,MAAM,aAEb,qBAAKA,MAAM,SACX,qBAAKA,MAAM,SACX,qBAAKA,MAAM,YACX,qBAAKA,MAAM,eAEP,gCACE,uBAAOoG,QAAQ,YAAf,2BACA,uBACE9F,YAAY,QACZhC,KAAK,YACLzB,KAAK,YACLoD,GAAG,YACHM,SAAU4F,OAGd,gCACE,uBAAOC,QAAQ,WAAf,0BACA,uBACE9F,YAAY,OACZhC,KAAK,WACLzB,KAAK,WACLoD,GAAG,WACHM,SAAU4F,OAGd,gCACE,uBAAOC,QAAQ,QAAf,sBACA,uBACE9F,YAAY,qBACZhC,KAAK,QACLzB,KAAK,QACLoD,GAAG,QACHM,SAAU4F,OAGd,gCACE,uBAAOC,QAAQ,MAAf,yBACA,uBACE9F,YAAY,SACZhC,KAAK,WACLzB,KAAK,WACLoD,GAAG,MACHM,SAAU4F,OAGd,uBACA,8BACE,wBAAQ1H,UAAW,eAAe5B,KAAK,SAAvC,sBAEF,0BAEF,uBAAS,uBACT,uBAAS,2BC1CA2J,OAzDf,WA0CE,OACE,sBAAK/H,UAAU,aAAf,UAEI,cAAC,IAAD,CAAMC,GAAG,IAAT,SACE,qBAAKE,IAAI,sBAAsBD,IAAI,0BAIvC,8BA/CEgE,GAAKC,WAEL,qBAAInE,UAAU,YAAd,UAME,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMC,GAAG,gBAAT,6BAIF,oBAAID,UAAU,WAAd,SAEE,mBAAGgI,KAAK,IAAI5H,QAAS,kBAAM8D,GAAK+D,UAAhC,yBAQJ,qBAAIjI,UAAU,YAAd,UACE,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMC,GAAG,UAAT,sBAIF,oBAAID,UAAU,WAAd,SACE,cAAC,IAAD,CAAMC,GAAG,SAAT,8BCKGiI,OApCf,WACE,MAAmB3C,aAAYP,IAAxBmD,EAAP,oBAwBA,OAtBAhH,qBAAU,WAAM,8CACd,mCAAA0C,EAAA,sEACqBpI,EAAW,OAAQ,OADxC,UACQ8C,EADR,SAEQF,EAAWE,EAAKE,KAAI,SAACmB,GAAD,OAAUA,EAAKtC,QAE5BuB,OAJf,iCAK2BsJ,EAAS,CAAE5D,UAAW,CAAElG,cALnD,gBAKY6C,EALZ,EAKYA,KACYA,EAAKiH,SAAS9J,SAEtB+C,SAAQ,SAACxB,GACnBnE,EAAW,OAAQ,SAAUmE,MATnC,QAaEwI,YAAW,WACThM,OAAO2G,SAASC,OAAO,OACtB,KAfL,6CADc,uBAAC,WAAD,wBAmBdqF,KACC,CAACF,IAGF,8BACE,eAAC,GAAD,WACE,0CACA,8DACA,mFCeOG,OA7Cf,WACE,IACI/B,EADIrF,EAASH,YAASF,GAAlBK,KAOR,OAJIA,IACFqF,EAAOrF,EAAKqF,MAIZ,mCACE,sBAAKvG,UAAU,iBAAf,UACE,cAAC,IAAD,CAAMC,GAAG,IAAT,qCAECsG,EACC,qCACE,oDACqBA,EAAKE,UAD1B,IACsCF,EAAKuB,YAE1CvB,EAAKgC,OAAO9J,KAAI,SAAC+J,GAAD,OACf,sBAAqBxI,UAAU,OAA/B,UACE,6BACG,IAAIwC,KAAKhC,SAASgI,EAAMC,eAAeC,uBAE1C,qBAAK1I,UAAU,WAAf,SACGwI,EAAMnK,SAASI,KAAI,WAA+BkK,GAA/B,IAAGrL,EAAH,EAAGA,IAAKsE,EAAR,EAAQA,OAAQ/B,EAAhB,EAAgBA,KAAMC,EAAtB,EAAsBA,MAAtB,OAClB,sBAAiBE,UAAU,iBAA3B,UACE,eAAC,IAAD,CAAMC,GAAE,oBAAe3C,GAAvB,UACE,qBAAK4C,IAAKL,EAAMM,IAAG,kBAAayB,EAAO,MACvC,4BAAI/B,OAEN,8BACE,qCAAQC,SANF6I,UANNH,EAAMlL,WAoBlB,WC3CG,SAASsL,KACxB,MAA4BvD,mBAAS,IAArC,mBAAOzD,EAAP,KAAeiH,EAAf,KACA,EAAkCxD,mBAAS,IAA3C,mBAAOyD,EAAP,KAAkBC,EAAlB,KAcA,OAZA5H,qBAAU,WACV,KAAIS,EAAO/C,OAAS,GAApB,CACA,IAAMmK,EAAe,GACrBpH,EAAOR,SAAQ,SAAA6H,GAAK,OAAID,EAAa1E,KAAK4E,IAAIC,gBAAiBF,OAC/DF,EAAaC,MACV,CAACpH,IAQF,qCACF,uBAAOxD,KAAK,OAAOgL,UAAQ,EAACC,OAAO,UAAUvH,SAP7C,SAAuBtF,GACvBqM,EAAU,YAAIrM,EAAEuF,OAAOuH,WAOtBR,EAAUrK,KAAI,SAAA8K,GAAQ,OAAI,qBAAKpJ,IAAKoJ,EAAUrJ,IAAKqJ,UCApD,IAAMC,GAAWC,YAAe,CAC9BC,IAAK,aAGDC,GAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAC1BzH,EAAQM,aAAaC,QAAQ,YACnC,MAAO,CACLkH,QAAQ,2BACHA,GADE,IAELC,cAAe1H,EAAK,iBAAaA,GAAU,SAK3C2H,GAAS,IAAIC,IAAa,CAC9BC,KAAMP,GAASQ,OAAOX,IACtBY,MAAO,IAAIC,MA4BEC,OAzBf,WACE,OACE,cAACC,EAAA,EAAD,CAAgBP,OAAQA,GAAxB,SACE,cAAC,IAAD,UACE,8BACE,eAAC,EAAD,WACE,cAAC,GAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,IAAIC,UAAWlG,KACjC,cAAC,IAAD,CAAOgG,OAAK,EAACC,KAAK,SAASC,UAAWtD,KACtC,cAAC,IAAD,CAAOoD,OAAK,EAACC,KAAK,UAAUC,UAAW9C,KACvC,cAAC,IAAD,CAAO4C,OAAK,EAACC,KAAK,WAAWC,UAAWxC,KACxC,cAAC,IAAD,CAAOsC,OAAK,EAACC,KAAK,gBAAgBC,UAAWpC,KAE7C,cAAC,IAAD,CAAOkC,OAAK,EAACC,KAAK,gBAAgBC,UAAWvE,KAC7C,cAAC,IAAD,CAAOqE,OAAK,EAACC,KAAK,UAAUC,UAAW9B,KACvC,cAAC,IAAD,CAAO8B,UAAWvD,kBC5C1BwD,GAAcC,QACW,cAA7BxO,OAAO2G,SAAS8H,UAEa,UAA7BzO,OAAO2G,SAAS8H,UAEhBzO,OAAO2G,SAAS8H,SAASC,MACvB,2DAyCJ,SAASC,GAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT1J,MAAK,SAAA+J,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrN,QACfgN,UAAUC,cAAcO,YAI1B7O,QAAQC,IACN,iHAKEmO,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBxO,QAAQC,IAAI,sCAGRmO,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BQ,OAAM,SAAAnG,GACL7I,QAAQ6I,MAAM,4CAA6CA,MC7FjEoG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SDYnB,SAAkBjB,GACvB,GAEE,kBAAmBC,UAAW,CAI9B,GADkB,IAAIhC,IAAIiD,GAAwB/P,OAAO2G,SAASiF,MACpDoE,SAAWhQ,OAAO2G,SAASqJ,OAIvC,OAGFhQ,OAAOiQ,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMmB,GAAN,sBAEPxB,KAgEV,SAAiCK,EAAOC,GAEtCqB,MAAMtB,EAAO,CACXlB,QAAS,CAAE,iBAAkB,YAE5BxI,MAAK,SAAAiL,GAEJ,IAAMC,EAAcD,EAASzC,QAAQ2C,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CzB,UAAUC,cAAcyB,MAAMtL,MAAK,SAAA+J,GACjCA,EAAawB,aAAavL,MAAK,WAC7BlF,OAAO2G,SAAS+J,eAKpB/B,GAAgBC,EAAOC,MAG1BY,OAAM,WACLhP,QAAQC,IACN,oEAvFAiQ,CAAwB/B,EAAOC,GAI/BC,UAAUC,cAAcyB,MAAMtL,MAAK,WACjCzE,QAAQC,IACN,iHAMJiO,GAAgBC,EAAOC,OCrC/BE,K","file":"static/js/main.0df686e4.chunk.js","sourcesContent":["export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n  return name + 's';\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    const request = window.indexedDB.open('shop-shop', 1);\n    let db, tx, store;\n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    request.onsuccess = function(e) {\n      db = request.result;\n      tx = db.transaction(storeName, 'readwrite');\n      store = tx.objectStore(storeName);\n\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n  });\n}\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\n\nexport const ADD_TO_CART = \"ADD_TO_CART\";\nexport const ADD_MULTIPLE_TO_CART = \"ADD_MULTIPLE_TO_CART\";\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\nexport const CLEAR_CART = \"CLEAR_CART\";\nexport const UPDATE_CART_QUANTITY = \"UPDATE_CART_QUANTITY\";\nexport const TOGGLE_CART = \"TOGGLE_CART\";\n\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n","import { useReducer } from 'react';\nimport {\n  UPDATE_PRODUCTS,\n  ADD_TO_CART,\n  UPDATE_CART_QUANTITY,\n  REMOVE_FROM_CART,\n  ADD_MULTIPLE_TO_CART,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  CLEAR_CART,\n  TOGGLE_CART,\n} from './actions';\n\n// The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    // Returns a copy of state with an update products array. We use the action.products property and spread it's contents into the new array.\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product],\n      };\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n    // Returns a copy of state, sets the cartOpen to true and maps through the items in the cart.\n    // If the item's `id` matches the `id` that was provided in the action.payload, we update the purchase quantity.\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map((product) => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        }),\n      };\n\n    // First we iterate through each item in the cart and check to see if the `product._id` matches the `action._id`\n    // If so, we remove it from our cart and set the updated state to a variable called `newState`\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter((product) => {\n        return product._id !== action._id;\n      });\n\n      // Then we return a copy of state and check to see if the cart is empty.\n      // If not, we set the cartOpen status to  `true`. Then we return an updated cart array set to the value of `newState`.\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState,\n      };\n\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: [],\n      };\n\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen,\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory,\n      };\n\n    // Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\n    // This saves us from a crash.\n    default:\n      return state;\n  }\n};\n\nexport function useProductReducer(initialState) {\n  return useReducer(reducer, initialState);\n}\n","import React, { createContext, useContext } from \"react\";\nimport { useProductReducer } from './reducers'\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\nconst StoreProvider = ({ value = [], ...props }) => {\n  const [state, dispatch] = useProductReducer({\n    products: [],\n    cart: [],\n    cartOpen: false,\n    categories: [],\n    currentCategory: '',\n  });\n\n  return <Provider value={[state, dispatch]} {...props} />;\n};\n\nconst useStoreContext = () => {\n  return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductItem(item) {\n  console.log(item)\n  const [state, dispatch] = useStoreContext();\n\n const {\n    name,\n    _id,\n    price,\n    quantity\n  }= item;\n\n  const { cart } = state\n\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id)\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  }\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n      \n      <img\n          alt={name}\n          src={`/images/${'Skirt.jpg'}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        {/*<div>{quantity} {pluralize(\"item\", quantity)} in stock</div>*/}\n        <span>${price}</span>\n      </div>\n      <button className=\"cardbutton\" onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }comments {\n          _id\n          commentText\n          commentAuthor\n          createdAt\n        }\n      }\n    }\n  `;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n      comments {\n        _id\n        commentText\n        commentAuthor\n        createdAt\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport {\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n} from '../../utils/actions';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n      categoryData.categories.forEach((category) => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then((categories) => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories,\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = (id) => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id,\n    });\n  };\n\n  return (\n    <div class=\"categorynav\">\n      <h2>Choose a Category:</h2>\n    <br></br>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n\n      ))}\n    <div>\n      <br></br>\n    </div>\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","export default __webpack_public_path__ + \"static/media/spinner.689d9a07.gif\";","import React, { useEffect } from 'react';\nimport ProductItem from '../ProductItem';\nimport CategoryMenu from '../CategoryMenu';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport spinner from '../../assets/spinner.gif';\n\nfunction ProductList() {\n  const [state, dispatch] = useStoreContext();\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    } else if (!loading) {\n      idbPromise('products', 'get').then((products) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products,\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(\n      (product) => product.category._id === currentCategory\n    );\n  }\n\n  return (\n    <div className=\"my-2\">\n      <div id=\"productheader\">\n      <h2>Our Products:</h2>\n      <h3> Click on each listing for more information and to purchase. </h3>\n      <p> You <b>must</b> be logged in to read or write comments or to purchase items. </p>\n      <p>Thank you for shopping with us!</p>\n      </div>\n      <br></br>\n      <CategoryMenu />\n      <br></br>\n      {state.products.length ? (\n        <div className=\"productdiv\">\n          {filterProducts().map((product) => (\n            <ProductItem\n            key={product._id}\n            _id={product._id}\n            name={product.name}\n            price={product.price}\n            quantity={product.quantity}\n          />\n        ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React from 'react';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nconst CartItem = ({ item }) => {\n\n  const [, dispatch] = useStoreContext();\n\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id\n    });\n    idbPromise('cart', 'delete', { ...item });\n\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n      idbPromise('cart', 'delete', { ...item });\n\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n\n    }\n  }\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.images[0]}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/client';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport './style.css';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n  const [state, dispatch] = useStoreContext();\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    }\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach((item) => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout() {\n    const productIds = [];\n\n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds },\n    });\n  }\n\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        🛒\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>\n        [close]\n      </div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map((item) => (\n            <CartItem key={item._id} item={item} />\n          ))}\n\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n\n            {Auth.loggedIn() ? (\n              <button onClick={submitCheckout}>Checkout</button>\n            ) : (\n              <span>(log in to check out)</span>\n            )}\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n  );\n};\n\nexport default Cart;\n","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport Cart from \"../components/Cart\";\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n\nconst CommentList = ({ comments = [] }) => {\n    if (!comments.length) {\n        return <h3>Be the first to comment!</h3>;\n    }\n\n    return (\n        <>\n\n            <div>\n                {comments &&\n                    comments.map((comment) => (\n\n                        <div key={comment._id}>\n\n                            <div className=\"container\">\n                                <div className=\"columns\">\n                                    <div className=\"column is-half is-offset-one-quarter\">\n                                        <div className=\"has-text-left\">\n                                            comment by {comment.commentAuthor}: {' '}\n                                        </div>\n                                        <div className=\"card has-background-grey-lighter\">\n                                            <div className=\"card-content\">\n                                                {comment.commentText}\n                                            </div>\n                                        </div>\n                                        <div className=\"has-text-right\">\n                                            {comment.createdAt}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    ))}\n            </div>\n        </>\n    );\n};\n\nexport default CommentList;\n\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_COMMENT = gql`\n  mutation addComment($productId: ID!, $commentText: String!){\n    addComment(productId: $productId, commentText: $commentText){\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n      comments{\n        commentAuthor\n        commentText\n        createdAt\n      }\n    }\n  }\n`;\n\nexport const ADD_PRODUCT = gql`\nmutation addProduct(\n  $name: String!\n  $description: String!\n  $images: [String!]\n  $price: Integer\n  $quantity: Integer\n  \n) {\n  addProduct(\n    name: $name\n    description: $description\n    images: $images\n    price: $price\n    quantity: $quantity\n  ) \n  }\n`;","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\n\nimport { ADD_COMMENT } from '../../utils/mutations';\n\nimport Auth from '../../utils/auth';\n\nconst CommentForm = ({ productId }) => {\n    const [commentText, setCommentText] = useState('');\n\n    const [addComment, { error }] = useMutation(ADD_COMMENT);\n\n    const handleFormSubmit = async (event) => {\n        event.preventDefault();\n\n        try {\n            const { data } = await addComment({\n                variables: {\n                    productId,\n                    commentText,\n                    commentAuthor: Auth.getProfile().data.email,\n                },\n            });\n\n            setCommentText('');\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n\n        if (name === 'commentText') {\n            setCommentText(value);\n        }\n    };\n\n    return (\n        <div>\n\n            {Auth.loggedIn() ? (\n                <>\n                    <div className=\"container\">\n                        <div className=\"columns\">\n                            <div className=\"column is-half is-offset-one-quarter\">\n                                <label>\n                                    What are your thoughts on this item?\n                                </label>\n                                <form\n                                    className=\"flex-row justify-center justify-space-between-md align-center\"\n                                    onSubmit={handleFormSubmit}\n                                >\n                                    <textarea\n                                        name=\"commentText\"\n                                        className=\"textarea is-primary\"\n                                        placeholder=\"Delicious!\"\n                                        value={commentText}\n                                        style={{ lineHeight: '1.5', resize: 'vertical' }}\n                                        onChange={handleChange}\n                                    ></textarea>\n                                    <button className=\"cardbutton\" type=\"submit\">\n                                        Add a Comment\n                                    </button>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </>\n            ) : (\n                <div className=\"commentcontainer\">\n                    <div>\n                        <div>\n                            <p>\n                                You need to be logged in add your comment. Please{' '}\n                                <Link to=\"/login\">login</Link> or <Link to=\"/signup\">signup.</Link>\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default CommentForm;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport Cart from '../components/Cart';\nimport CommentList from '../components/CommentList';\nimport CommentForm from '../components/CommentForm';\nimport { useStoreContext } from '../utils/GlobalState';\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\nimport { \n  QUERY_PRODUCTS,\n  QUERY_USER } from '../utils/queries';\nimport { idbPromise } from '../utils/helpers';\nimport spinner from '../assets/spinner.gif';\n\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n  \n  const { user } = useQuery(QUERY_USER);\n\n\n  const { products, cart } = state;\n\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find((product) => product._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts,\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 },\n      });\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id,\n    });\n\n    idbPromise('cart', 'delete', { ...currentProduct });\n  }\n\n\n\n\n\n  return (\n    <>\n      <div className=\"detailcontainer\">\n        {currentProduct && cart ? (\n          <div>\n          <div className=\"back\">\n            <Link to=\"/\" >← Products</Link>\n            </div>\n            <br></br>\n\n                <div className=\"cardtitleprice\">\n                    <p>\n                      {currentProduct.name}\n                    </p>\n                      <p>\n                        $ {currentProduct.price}{' '}\n                      </p>\n                    </div>\n\n<div className=\"cardimagecontent\">\n                  <div className=\"cardimage\">\n                    <figure className=\"detailimage\">\n                      <img\n                        alt={currentProduct.name}\n                        src={`/images/${currentProduct.images[0]}`}\n                      />\n                    </figure>\n                  </div>\n \n                  {user ? (\n                  <div className=\"cardcontent\">\n                    <p>{user.firstName}</p>\n                      <p>{currentProduct.description}</p>\n                      </div>\n                  ) : (\n                    <div className=\"cardcontent\">\n                      <p>{currentProduct.description}</p>\n                      </div>\n                  )}\n                  </div>\n\n                  <div>\n                  <button className=\"cardbutton\" onClick={addToCart}>\n                    Add to Cart\n                  </button>\n                  <button className=\"cardbutton\"\n                    disabled={!cart.find((p) => p._id === currentProduct._id)}\n                    onClick={removeFromCart}\n                  >\n                    Remove from Cart\n                  </button>\n                  </div>\n\n            <div>\n            <CommentForm productId={currentProduct._id} />\n            </div>\n\n              <div>\n                comments:\n              </div>\n\n            <div>\n            <CommentList comments={currentProduct.comments} />\n          </div>\n          </div>\n\n\n          ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n      </div>\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"login-container\">\n      <div className=\"login-back\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n      </div>\n      <br></br>\n      <div>\n      <h2>Login</h2>\n      </div>\n      <br></br>\n      <form className=\"login-form\" onSubmit={handleFormSubmit}>\n        <br></br>\n      <figure aria-hidden=\"true\">\n    <div class=\"person-body\"></div>\n    <div class=\"neck skin\"></div>\n    <div class=\"head skin\">\n      <div class=\"eyes\"></div>\n      <div class=\"mouth\"></div>\n    </div>\n    <div class=\"hair\"></div>\n    <div class=\"ears\"></div>\n    <div class=\"shirt-1\"></div>\n    <div class=\"shirt-2\"></div>\n  </figure>\n        <div>\n          <label htmlFor=\"email\">  Email address:     </label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"pwd\">   Password:    </label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n         <br></br>\n        <div>\n          <button className=\"login-button\" type=\"submit\">Submit</button>\n        </div>\n        <br></br>\n      </form>\n      <br></br><br></br>\n      <br></br><br></br>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"login-container\">\n      <div className=\"login-back\">\n      <Link to=\"/login\">← Go to Login</Link>\n      </div>\n      <br></br>\n      <div>\n      <h2>Sign Up</h2>\n      </div>\n      <br></br>\n      <form className=\"login-form\" onSubmit={handleFormSubmit}>\n        <br></br>\n        <figure aria-hidden=\"true\">\n    <div class=\"person-body\"></div>\n    <div class=\"neck skin\"></div>\n    <div class=\"head skin\">\n      <div class=\"eyes\"></div>\n      <div class=\"mouth\"></div>\n    </div>\n    <div class=\"hair\"></div>\n    <div class=\"ears\"></div>\n    <div class=\"shirt-1\"></div>\n    <div class=\"shirt-2\"></div>\n  </figure>\n        <div>\n          <label htmlFor=\"firstName\">First Name:  </label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"lastName\">Last Name:  </label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"email\">Email:  </label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"pwd\">Password:  </label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <br></br>\n        <div>\n          <button className= \"login-button\" type=\"submit\">Submit</button>\n        </div>\n        <br></br>\n      </form>\n      <br></br><br></br>\n      <br></br><br></br>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"navbarUl1\">\n          {/*<li className=\"navbarli\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n      </li>*/}\n          <li className=\"navbarli\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"navbarli\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"navbarUl2\">\n          <li className=\"navbarli\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"navbarli\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <div className=\"mainheader\">\n        \n        <Link to=\"/\">\n          <img src=\"images/mainlogo.png\" alt=\"Shop My Closet Logo\"/>\n        </Link>\n        \n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </div>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Jumbotron from '../components/Jumbotron';\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from '../utils/helpers';\n\nfunction Success() {\n  const [addOrder] = useMutation(ADD_ORDER);\n\n  useEffect(() => {\n    async function saveOrder() {\n      const cart = await idbPromise('cart', 'get');\n      const products = cart.map((item) => item._id);\n\n      if (products.length) {\n        const { data } = await addOrder({ variables: { products } });\n        const productData = data.addOrder.products;\n\n        productData.forEach((item) => {\n          idbPromise('cart', 'delete', item);\n        });\n      }\n\n      setTimeout(() => {\n        window.location.assign('/');\n      }, 3000);\n    }\n\n    saveOrder();\n  }, [addOrder]);\n\n  return (\n    <div>\n      <Jumbotron>\n        <h1>Success!</h1>\n        <h2>Thank you for your purchase!</h2>\n        <h2>You will now be redirected to the home page</h2>\n      </Jumbotron>\n    </div>\n  );\n}\n\nexport default Success;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, images, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${images[0]}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React, { useState, useEffect } from 'react';\r\n\r\nexport default function Upload() {\r\nconst [images, setImages] = useState([]);\r\nconst [imageURLs, setImageURLs] = useState([]);\r\n\r\nuseEffect(() => {\r\nif (images.length < 1) return;\r\nconst newImageUrls = [];\r\nimages.forEach(image => newImageUrls.push(URL.createObjectURL( image) ));\r\nsetImageURLs(newImageUrls) ;\r\n}, [images]);\r\n\r\nfunction onImageChange(e) {\r\nsetImages([...e.target.files]);\r\n}\r\n\r\n\r\nreturn(\r\n  <>\r\n<input type=\"file\" multiple accept=\"image/*\" onChange={onImageChange} />\r\n{imageURLs.map(imageSrc => <img src={imageSrc} alt={imageSrc} />) }\r\n\r\n</>\r\n);\r\n}","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport { StoreProvider } from './utils/GlobalState';\nimport Success from './pages/Success';\nimport OrderHistory from './pages/OrderHistory';\nimport Upload from './pages/Upload';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n            <Nav/>\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              {/*<Route exact path=\"/Likes\" component={Likes} />*/}\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route exact path=\"/upload\" component={Upload} />\n              <Route component={NoMatch} />\n            </Switch>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}